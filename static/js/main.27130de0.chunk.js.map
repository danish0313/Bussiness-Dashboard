{"version":3,"sources":["Dashboard/Brand.js","Dashboard/Container.js","Dashboard/GlobalStyle.js","Dashboard/Card.js","Dashboard/Data.js","Dashboard/Chart.js","Dashboard/Table.js","Dashboard/DarkSwitch.js","Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Brand","Container","styled","div","GlobalStyle","createGlobalStyle","dark","Card","height","generateData","count","start","growth","data","i","push","Math","floor","random","chartData","name","color","format","num","tableRows","map","month","phones","services","laptops","tablets","tableColumns","width","label","dataKey","numeric","getOptions","chart","type","backgroundColor","style","fontFamily","fontSize","title","text","xAxis","labels","categories","yAxis","gridLineColor","min","reversedStacks","tooltip","pointFormat","shared","plotOptions","series","borderWidth","column","stacking","legend","itemStyle","Chart","useContext","ThemeContext","theme","highcharts","Highcharts","options","TableCell","header","align","ReactVirtualizedTable","cellRenderer","cellData","columnIndex","props","columns","headerRenderer","this","rowHeight","headerHeight","rowCount","length","rowGetter","index","rowStyle","borderBottom","boxSizing","gridStyle","outline","other","key","headerProps","React","Component","VirtualizedTable","DarkSwitchContainer","Input","input","Label","DarkSwitch","setTheme","onChange","e","target","checked","createContext","Dashboard","themeState","useState","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAEO,SAASA,IACd,OAAO,+C,8OCAF,IAAMC,EAAYC,IAAOC,IAAV,K,8MCDf,IAOMC,EAAcC,YAAH,KAGhB,qBAAGC,MAAe,iBALA,UAKA,OARF,WAWA,qBAAGA,KAbN,UAII,a,qQCHlB,IAAMC,EAAOL,IAAOC,IAAV,KAGK,qBAAGG,KDHC,UCG+B,WAC7B,qBAAGA,KAAmB,QDF3B,aCInB,gBAAGE,EAAH,EAAGA,OAAH,OAAgBA,GAAM,kBAAeA,EAAf,U,kCCT1B,SAASC,EAAaC,EAAOC,EAAOC,GAIlC,IAFA,IAAMC,EAAO,GAEJC,EAAI,EAAGA,EAAIJ,EAAOI,IAEzBD,EAAKE,KAAKC,KAAKC,MAAMN,EAAQK,KAAKE,SAAWJ,EAAIF,IAGnD,OAAOC,EAGF,IAAMM,EAAY,CACvB,CACEC,KAAM,SACNP,KAAMJ,EAAa,GAAI,GAAI,GAC3BY,MAAO,WAET,CACED,KAAM,WACNP,KAAMJ,EAAa,GAAI,GAAI,IAC3BY,MAAO,WAET,CACED,KAAM,UACNP,KAAMJ,EAAa,GAAI,EAAG,IAC1BY,MAAO,WAET,CACED,KAAM,UACNP,KAAMJ,EAAa,GAAI,EAAG,IAC1BY,MAAO,YAmBX,SAASC,EAAOC,GACd,MAAM,IAAN,OAAWA,EAAX,YAGK,IAAMC,EAnBE,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAO8BC,KAAI,SAACC,EAAOZ,GAAR,MAAe,CACjDY,QACAC,OAAQL,EAAOH,EAAU,GAAGN,KAAKC,IACjCc,SAAUN,EAAOH,EAAU,GAAGN,KAAKC,IACnCe,QAASP,EAAOH,EAAU,GAAGN,KAAKC,IAClCgB,QAASR,EAAOH,EAAU,GAAGN,KAAKC,QAGvBiB,EAAe,CAC1B,CACEC,MAAO,IACPC,MAAO,QACPC,QAAS,SAEX,CACEF,MAAO,IACPC,MAAO,SACPC,QAAS,SACTC,SAAS,GAEX,CACEH,MAAO,IACPC,MAAO,WACPC,QAAS,WACTC,SAAS,GAEX,CACEH,MAAO,IACPC,MAAO,UACPC,QAAS,UACTC,SAAS,GAEX,CACEH,MAAO,IACPC,MAAO,UACPC,QAAS,UACTC,SAAS,ICjFb,SAASC,EAAW9B,GAClB,MAAO,CACL+B,MAAO,CACL7B,OAAQ,QACR8B,KAAM,SACNC,gBAAiBjC,EHXG,UGWiB,QACrCkC,MAAO,CACLC,WAAW,wBACXC,SAAU,oBAGdC,MAAO,CACLC,KAAM,qBACNJ,MAAO,CACLnB,MAAOf,EHjBU,UGiBS,UAG9BuC,MAAO,CACLC,OAAQ,CACNN,MAAO,CACLnB,MAAOf,EHvBQ,UGuBW,UAG9ByC,WAAY,CACV,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QAGJC,MAAO,CACLC,cAAe3C,EAAO,OH1CH,UG2CnBwC,OAAQ,CACNN,MAAO,CACLnB,MAAOf,EH7CQ,UG6CW,UAG9B4C,IAAK,EACLC,gBAAgB,EAChBR,MAAO,CACLH,MAAO,CACLnB,MAAOf,EHpDQ,UGoDW,SAE5BsC,KAAM,wBAGVQ,QAAS,CACPC,YACE,2GACFC,QAAQ,EACRf,gBAAiBjC,EHhEG,UGgEiB,QACrCkC,MAAO,CACLnB,MAAOf,EH/DU,UG+DS,UAG9BiD,YAAa,CACXC,OAAQ,CACNC,YAAa,GAEfC,OAAQ,CACNC,SAAU,WAGdC,OAAQ,CACNC,UAAW,CACTxC,MAAOf,EH5EU,UG4ES,UAG9BkD,OAAQrC,GAIL,SAAS2C,IAAS,IAAD,EACIC,qBAAWC,GADf,mBACfC,EADe,KAEhB3D,GAFgB,KAEC,SAAV2D,GACb,OACE,kBAAC1D,EAAD,CAAMC,OAAQ,IAAKF,KAAMA,GACvB,kBAAC,IAAD,CAAiB4D,WAAYC,IAAYC,QAAShC,EAAW9B,M,kLCpFnE,IAEM+D,EAAYnE,IAAOC,IAAV,KAEJ,gBAAGmE,EAAH,EAAGA,OAAH,SAAWhE,KACVgE,EJRc,UIQQ,QAAW,WACzC,kBAAyB,UAAzB,EAAGC,OAAY,iCAGbC,E,4MACJC,aAAe,YAAgC,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAAkB,EAClB,EAAKC,MAAvBC,EADoC,EACpCA,QAASvE,EAD2B,EAC3BA,KACjB,OACE,kBAAC+D,EAAD,CACE/D,KAAMA,EACNiE,MAAOM,EAAQF,GAAaxC,QAAU,QAAU,QAE/CuC,I,EAIPI,eAAiB,YAA6B,IAA1B7C,EAAyB,EAAzBA,MAAO0C,EAAkB,EAAlBA,YAAkB,EACjB,EAAKC,MAAvBC,EADmC,EACnCA,QAASvE,EAD0B,EAC1BA,KACjB,OACE,kBAAC+D,EAAD,CACE/D,KAAMA,EACNgE,QAAM,EACNC,MAAOM,EAAQF,GAAaxC,QAAU,QAAU,QAEhD,8BAAOF,K,uDAIH,IAAD,SACmB8C,KAAKH,MAAvBC,EADD,EACCA,QAASvE,EADV,EACUA,KACjB,OACE,kBAAC,IAAD,MACG,gBAAGE,EAAH,EAAGA,OAAQwB,EAAX,EAAWA,MAAX,OACC,kBAAC,IAAD,CACExB,OAAQA,EACRwB,MAAOA,EACPgD,UAzCO,GA0CPC,aA1CO,GA2CPC,SAAU1D,EAAU2D,OACpBC,UAAW,gBAAGC,EAAH,EAAGA,MAAH,OAAe7D,EAAU6D,IACpCC,SAAU,CACRC,aAAa,aAAD,OAAejF,EAAO,OJnDzB,WIoDTkF,UAAW,cAEbC,UAAW,CAAEC,QAAS,IAErBb,EAAQpD,KAAI,WAAwB4D,GAAW,IAAhCnD,EAA+B,EAA/BA,QAAYyD,EAAmB,2BAC7C,OACE,kBAAC,IAAD,eACEC,IAAK1D,EACLA,QAASA,EACT4C,eAAgB,SAAAe,GAAW,OACzB,EAAKf,eAAL,eACKe,EADL,CAEElB,YAAaU,MAGjBZ,aAAc,EAAKA,cACfkB,e,GAtDcG,IAAMC,WAiEnC,SAASC,IAAoB,IAAD,EACPjC,qBAAWC,GADJ,mBAC1BC,EAD0B,KAE3B3D,GAF2B,KAEX,QAAT2D,GAEb,OACE,kBAAC1D,EAAD,CAAMC,OAAQ,IAAKF,KAAMA,GACvB,kBAAC,EAAD,CAAuBA,KAAMA,EAAMuE,QAAS9C,K,0SCtFlD,IAAMkE,EAAsB/F,IAAOC,IAAV,KAMnB+F,EAAQhG,IAAOiG,MAAV,KACLC,EAAQlG,IAAO+B,MAAV,KAEA,qBAAG3B,KAAmB,OAAS,WAGnC,SAAS+F,IAAc,IAAD,EACDtC,qBAAWC,GADV,mBACpBC,EADoB,KACbqC,EADa,KAErBhG,EAAiB,SAAV2D,EACb,OACE,kBAACgC,EAAD,KACE,kBAACG,EAAD,CAAO9F,KAAMA,GACX,kBAAC4F,EAAD,CACE5D,KAAK,WACLiE,SAAU,SAAAC,GACRF,EAASE,EAAEC,OAAOC,QAAU,OAAS,UAEvCA,QAASpG,IANb,cCZC,IAAM0D,EAAe2C,0BAErB,SAASC,IACd,IAAMC,EAAaC,mBAAS,SADF,cAEAD,EAFA,GAEnB5C,EAFmB,KAGpB3D,GAHoB,KAGH,SAAV2D,GACb,OACE,kBAACD,EAAa+C,SAAd,CAAuBC,MAAOH,GAC5B,kBAACzG,EAAD,CAAaE,KAAMA,IACnB,kBAACL,EAAD,KACE,kBAACD,EAAD,MACA,kBAACqG,EAAD,MACA,kBAACvC,EAAD,MACA,kBAACkC,EAAD,QCfOiB,MAJf,WACE,OAAO,kBAACL,EAAD,OCQWM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.27130de0.chunk.js","sourcesContent":["import React from 'react';\n\nexport function Brand(){\n  return <h1> Business Corp </h1>\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  position: relative;\n  max-width: 1200px;\n  margin: auto;\n\n  @media (max-width: 1200px) {\n    margin: 40px 20px;\n    font-size: 12px;\n  }\n`;\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const black = '#252020';\nexport const darkerGrey = '#353131';\nexport const darkGrey = '#515263';\nexport const medGrey = '#dad9d9';\nexport const lightGrey = '#f7f7f7';\nexport const brandColor = '#1DDA65';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    h1 {\n      ${({ dark }) => dark && `color: ${brandColor};`};  \n    }\n    color: ${darkGrey}; \n    background-color: ${({ dark }) => (dark ? black : lightGrey)};  \n    font-family: 'Blinker', sans-serif;\n  }\n`;\n","import styled from 'styled-components';\nimport { medGrey, darkerGrey } from './GlobalStyle';\n\nexport const Card = styled.div`\n  margin-top: 20px;\n  padding: 20px;\n  background-color: ${({ dark }) => (dark ? darkerGrey : 'white')};\n  box-shadow: 0px 3px 5px ${({ dark }) => (dark ? 'black' : medGrey)};\n  box-sizing: border-box;\n  ${({ height }) => height && `height: ${height}px;`}\n\n  @media (max-width: 1200px) {\n    padding: 10px;\n  }\n`;\n","function generateData(count, start, growth) {\n  // create an empty array\n  const data = [];\n  // loop over the count\n  for (let i = 0; i < count; i++) {\n    // push a random number onto the array\n    data.push(Math.floor(start + Math.random() * i * growth));\n  }\n  // return array\n  return data;\n}\n\nexport const chartData = [\n  {\n    name: 'Phones',\n    data: generateData(12, 30, 5),\n    color: '#149947',\n  },\n  {\n    name: 'Services',\n    data: generateData(12, 10, 0.2),\n    color: '#1DDA65',\n  },\n  {\n    name: 'Laptops',\n    data: generateData(12, 6, 0.3),\n    color: '#5CF396',\n  },\n  {\n    name: 'Tablets',\n    data: generateData(12, 5, 0.5),\n    color: '#C1FAD7',\n  },\n];\n\nconst months = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nfunction format(num) {\n  return `$${num} Billion`;\n}\n\nexport const tableRows = months.map((month, i) => ({\n  month,\n  phones: format(chartData[0].data[i]),\n  services: format(chartData[1].data[i]),\n  laptops: format(chartData[2].data[i]),\n  tablets: format(chartData[3].data[i]),\n}));\n\nexport const tableColumns = [\n  {\n    width: 240,\n    label: 'Month',\n    dataKey: 'month',\n  },\n  {\n    width: 240,\n    label: 'Phones',\n    dataKey: 'phones',\n    numeric: true,\n  },\n  {\n    width: 240,\n    label: 'Services',\n    dataKey: 'services',\n    numeric: true,\n  },\n  {\n    width: 240,\n    label: 'Laptops',\n    dataKey: 'laptops',\n    numeric: true,\n  },\n  {\n    width: 240,\n    label: 'Tablets',\n    dataKey: 'tablets',\n    numeric: true,\n  },\n];\n","import React, { useContext } from 'react';\nimport { Card } from './Card';\nimport { ThemeContext } from './Dashboard';\nimport { lightGrey, darkerGrey, medGrey, darkGrey } from './GlobalStyle';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { chartData } from './Data';\n\nfunction getOptions(dark) {\n  return {\n    chart: {\n      height: '360px',\n      type: 'column',\n      backgroundColor: dark ? darkerGrey : 'white',\n      style: {\n        fontFamily: `'Blinker', sans-serif`,\n        fontSize: '14px !important',\n      },\n    },\n    title: {\n      text: 'Revenue by Product',\n      style: {\n        color: dark ? lightGrey : 'black',\n      },\n    },\n    xAxis: {\n      labels: {\n        style: {\n          color: dark ? lightGrey : 'black',\n        },\n      },\n      categories: [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ],\n    },\n    yAxis: {\n      gridLineColor: dark ? 'grey' : lightGrey,\n      labels: {\n        style: {\n          color: dark ? lightGrey : 'black',\n        },\n      },\n      min: 0,\n      reversedStacks: false,\n      title: {\n        style: {\n          color: dark ? lightGrey : 'black',\n        },\n        text: 'Billions of Dollars',\n      },\n    },\n    tooltip: {\n      pointFormat:\n        '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',\n      shared: true,\n      backgroundColor: dark ? darkerGrey : 'white',\n      style: {\n        color: dark ? lightGrey : 'black',\n      },\n    },\n    plotOptions: {\n      series: {\n        borderWidth: 0,\n      },\n      column: {\n        stacking: 'normal',\n      },\n    },\n    legend: {\n      itemStyle: {\n        color: dark ? lightGrey : 'black',\n      },\n    },\n    series: chartData,\n  };\n}\n\nexport function Chart() {\n  const [theme, setTheme] = useContext(ThemeContext);\n  const dark = theme === 'dark';\n  return (\n    <Card height={400} dark={dark}>\n      <HighchartsReact highcharts={Highcharts} options={getOptions(dark)} />\n    </Card>\n  );\n}\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { tableRows, tableColumns } from './Data';\nimport { AutoSizer, Column, Table } from 'react-virtualized';\nimport 'react-virtualized/styles.css';\nimport { Card } from './Card';\nimport { medGrey } from './GlobalStyle';\nimport { ThemeContext } from './Dashboard';\nimport { brandColor } from './GlobalStyle';\n\nconst ROW_HEIGHT = 48;\n\nconst TableCell = styled.div`\n  display: flex;\n  color: ${({ header, dark }) =>\n    dark ? (header ? brandColor : 'white') : 'black'};\n  ${({ align }) => align === 'right' && `flex-direction: row-reverse`}\n`;\n\nclass ReactVirtualizedTable extends React.Component {\n  cellRenderer = ({ cellData, columnIndex }) => {\n    const { columns, dark } = this.props;\n    return (\n      <TableCell\n        dark={dark}\n        align={columns[columnIndex].numeric ? 'right' : 'left'}\n      >\n        {cellData}\n      </TableCell>\n    );\n  };\n  headerRenderer = ({ label, columnIndex }) => {\n    const { columns, dark } = this.props;\n    return (\n      <TableCell\n        dark={dark}\n        header\n        align={columns[columnIndex].numeric ? 'right' : 'left'}\n      >\n        <span>{label}</span>\n      </TableCell>\n    );\n  };\n  render() {\n    const { columns, dark } = this.props;\n    return (\n      <AutoSizer>\n        {({ height, width }) => (\n          <Table\n            height={height}\n            width={width}\n            rowHeight={ROW_HEIGHT}\n            headerHeight={ROW_HEIGHT}\n            rowCount={tableRows.length}\n            rowGetter={({ index }) => tableRows[index]}\n            rowStyle={{\n              borderBottom: `1px solid ${dark ? 'grey' : medGrey}`,\n              boxSizing: 'border-box',\n            }}\n            gridStyle={{ outline: 0 }}\n          >\n            {columns.map(({ dataKey, ...other }, index) => {\n              return (\n                <Column\n                  key={dataKey}\n                  dataKey={dataKey}\n                  headerRenderer={headerProps =>\n                    this.headerRenderer({\n                      ...headerProps,\n                      columnIndex: index,\n                    })\n                  }\n                  cellRenderer={this.cellRenderer}\n                  {...other}\n                />\n              );\n            })}\n          </Table>\n        )}\n      </AutoSizer>\n    );\n  }\n}\n\nexport function VirtualizedTable() {\n  const [theme, setTheme] = useContext(ThemeContext);\n  const dark = theme == 'dark';\n\n  return (\n    <Card height={400} dark={dark}>\n      <ReactVirtualizedTable dark={dark} columns={tableColumns} />\n    </Card>\n  );\n}\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { ThemeContext } from './Dashboard';\n\nconst DarkSwitchContainer = styled.div`\n  position: absolute;\n  right: 0px;\n  top: 20px;\n`;\n\nconst Input = styled.input``;\nconst Label = styled.label`\n  cursor: pointer;\n  color: ${({ dark }) => (dark ? 'grey' : 'black')};\n`;\n\nexport function DarkSwitch() {\n  const [theme, setTheme] = useContext(ThemeContext);\n  const dark = theme === 'dark';\n  return (\n    <DarkSwitchContainer>\n      <Label dark={dark}>\n        <Input\n          type=\"checkbox\"\n          onChange={e => {\n            setTheme(e.target.checked ? 'dark' : 'light');\n          }}\n          checked={dark}\n        />\n        Dark Mode\n      </Label>\n    </DarkSwitchContainer>\n  );\n}\n","import React, { useState, createContext } from 'react';\nimport { Brand } from './Brand';\nimport { Container } from './Container';\nimport { GlobalStyle } from './GlobalStyle';\nimport { Card } from './Card';\nimport { Chart } from './Chart';\nimport { VirtualizedTable } from './Table';\nimport { DarkSwitch } from './DarkSwitch';\n\nexport const ThemeContext = createContext();\n\nexport function Dashboard() {\n  const themeState = useState('light');\n  const [theme, setTheme] = themeState;\n  const dark = theme === 'dark';\n  return (\n    <ThemeContext.Provider value={themeState}>\n      <GlobalStyle dark={dark} />\n      <Container>\n        <Brand />\n        <DarkSwitch />\n        <Chart />\n        <VirtualizedTable />\n      </Container>\n    </ThemeContext.Provider>\n  );\n}\n","import React from 'react';\nimport { Dashboard } from './Dashboard/Dashboard';\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}